// Code generated by protoc-gen-go. DO NOT EDIT.
// source: currency.proto

package currency

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//here the declaration of variables starts with 0, unlike other declarations
type Currency1 int32

const (
	Currency1_EUR Currency1 = 0
	Currency1_USD Currency1 = 1
	Currency1_JPY Currency1 = 2
	Currency1_BGN Currency1 = 3
	Currency1_CZK Currency1 = 4
	Currency1_DKK Currency1 = 5
	Currency1_GBP Currency1 = 6
	Currency1_HUF Currency1 = 7
	Currency1_PLN Currency1 = 8
	Currency1_RON Currency1 = 9
	Currency1_SEK Currency1 = 10
	Currency1_CHF Currency1 = 11
	Currency1_ISK Currency1 = 12
	Currency1_NOK Currency1 = 13
	Currency1_HRK Currency1 = 14
	Currency1_RUB Currency1 = 15
	Currency1_TRY Currency1 = 16
	Currency1_AUD Currency1 = 17
	Currency1_BRL Currency1 = 18
	Currency1_CAD Currency1 = 19
	Currency1_CNY Currency1 = 20
	Currency1_HKD Currency1 = 21
	Currency1_IDR Currency1 = 22
	Currency1_ILS Currency1 = 23
	Currency1_INR Currency1 = 24
	Currency1_KRW Currency1 = 25
	Currency1_MXN Currency1 = 26
	Currency1_MYR Currency1 = 27
	Currency1_NZD Currency1 = 28
	Currency1_PHP Currency1 = 29
	Currency1_SGD Currency1 = 30
	Currency1_THB Currency1 = 31
	Currency1_ZAR Currency1 = 32
)

var Currency1_name = map[int32]string{
	0:  "EUR",
	1:  "USD",
	2:  "JPY",
	3:  "BGN",
	4:  "CZK",
	5:  "DKK",
	6:  "GBP",
	7:  "HUF",
	8:  "PLN",
	9:  "RON",
	10: "SEK",
	11: "CHF",
	12: "ISK",
	13: "NOK",
	14: "HRK",
	15: "RUB",
	16: "TRY",
	17: "AUD",
	18: "BRL",
	19: "CAD",
	20: "CNY",
	21: "HKD",
	22: "IDR",
	23: "ILS",
	24: "INR",
	25: "KRW",
	26: "MXN",
	27: "MYR",
	28: "NZD",
	29: "PHP",
	30: "SGD",
	31: "THB",
	32: "ZAR",
}

var Currency1_value = map[string]int32{
	"EUR": 0,
	"USD": 1,
	"JPY": 2,
	"BGN": 3,
	"CZK": 4,
	"DKK": 5,
	"GBP": 6,
	"HUF": 7,
	"PLN": 8,
	"RON": 9,
	"SEK": 10,
	"CHF": 11,
	"ISK": 12,
	"NOK": 13,
	"HRK": 14,
	"RUB": 15,
	"TRY": 16,
	"AUD": 17,
	"BRL": 18,
	"CAD": 19,
	"CNY": 20,
	"HKD": 21,
	"IDR": 22,
	"ILS": 23,
	"INR": 24,
	"KRW": 25,
	"MXN": 26,
	"MYR": 27,
	"NZD": 28,
	"PHP": 29,
	"SGD": 30,
	"THB": 31,
	"ZAR": 32,
}

func (x Currency1) String() string {
	return proto.EnumName(Currency1_name, int32(x))
}

func (Currency1) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3dc60ed002193ea, []int{0}
}

//message declaration follows this pattern only, like incrementation with each addon or variable
type RateRequest struct {
	Base                 Currency1 `protobuf:"varint,1,opt,name=Base,proto3,enum=Currency1" json:"Base,omitempty"`
	Destination          Currency1 `protobuf:"varint,2,opt,name=Destination,proto3,enum=Currency1" json:"Destination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RateRequest) Reset()         { *m = RateRequest{} }
func (m *RateRequest) String() string { return proto.CompactTextString(m) }
func (*RateRequest) ProtoMessage()    {}
func (*RateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3dc60ed002193ea, []int{0}
}

func (m *RateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RateRequest.Unmarshal(m, b)
}
func (m *RateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RateRequest.Marshal(b, m, deterministic)
}
func (m *RateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateRequest.Merge(m, src)
}
func (m *RateRequest) XXX_Size() int {
	return xxx_messageInfo_RateRequest.Size(m)
}
func (m *RateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RateRequest proto.InternalMessageInfo

func (m *RateRequest) GetBase() Currency1 {
	if m != nil {
		return m.Base
	}
	return Currency1_EUR
}

func (m *RateRequest) GetDestination() Currency1 {
	if m != nil {
		return m.Destination
	}
	return Currency1_EUR
}

type RateResponse struct {
	Base                 Currency1 `protobuf:"varint,1,opt,name=Base,proto3,enum=Currency1" json:"Base,omitempty"`
	Destination          Currency1 `protobuf:"varint,2,opt,name=Destination,proto3,enum=Currency1" json:"Destination,omitempty"`
	Rate                 float64   `protobuf:"fixed64,3,opt,name=rate,proto3" json:"rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RateResponse) Reset()         { *m = RateResponse{} }
func (m *RateResponse) String() string { return proto.CompactTextString(m) }
func (*RateResponse) ProtoMessage()    {}
func (*RateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3dc60ed002193ea, []int{1}
}

func (m *RateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RateResponse.Unmarshal(m, b)
}
func (m *RateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RateResponse.Marshal(b, m, deterministic)
}
func (m *RateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateResponse.Merge(m, src)
}
func (m *RateResponse) XXX_Size() int {
	return xxx_messageInfo_RateResponse.Size(m)
}
func (m *RateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RateResponse proto.InternalMessageInfo

func (m *RateResponse) GetBase() Currency1 {
	if m != nil {
		return m.Base
	}
	return Currency1_EUR
}

func (m *RateResponse) GetDestination() Currency1 {
	if m != nil {
		return m.Destination
	}
	return Currency1_EUR
}

func (m *RateResponse) GetRate() float64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

type StreamingRateResponse struct {
	// oneof means either this or that message, (either)
	//
	// Types that are valid to be assigned to Message:
	//	*StreamingRateResponse_RateResponse
	//	*StreamingRateResponse_Error
	Message              isStreamingRateResponse_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *StreamingRateResponse) Reset()         { *m = StreamingRateResponse{} }
func (m *StreamingRateResponse) String() string { return proto.CompactTextString(m) }
func (*StreamingRateResponse) ProtoMessage()    {}
func (*StreamingRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3dc60ed002193ea, []int{2}
}

func (m *StreamingRateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamingRateResponse.Unmarshal(m, b)
}
func (m *StreamingRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamingRateResponse.Marshal(b, m, deterministic)
}
func (m *StreamingRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingRateResponse.Merge(m, src)
}
func (m *StreamingRateResponse) XXX_Size() int {
	return xxx_messageInfo_StreamingRateResponse.Size(m)
}
func (m *StreamingRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingRateResponse proto.InternalMessageInfo

type isStreamingRateResponse_Message interface {
	isStreamingRateResponse_Message()
}

type StreamingRateResponse_RateResponse struct {
	RateResponse *RateResponse `protobuf:"bytes,1,opt,name=rate_response,json=rateResponse,proto3,oneof"`
}

type StreamingRateResponse_Error struct {
	Error *status.Status `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*StreamingRateResponse_RateResponse) isStreamingRateResponse_Message() {}

func (*StreamingRateResponse_Error) isStreamingRateResponse_Message() {}

func (m *StreamingRateResponse) GetMessage() isStreamingRateResponse_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *StreamingRateResponse) GetRateResponse() *RateResponse {
	if x, ok := m.GetMessage().(*StreamingRateResponse_RateResponse); ok {
		return x.RateResponse
	}
	return nil
}

func (m *StreamingRateResponse) GetError() *status.Status {
	if x, ok := m.GetMessage().(*StreamingRateResponse_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StreamingRateResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StreamingRateResponse_RateResponse)(nil),
		(*StreamingRateResponse_Error)(nil),
	}
}

func init() {
	proto.RegisterEnum("Currency1", Currency1_name, Currency1_value)
	proto.RegisterType((*RateRequest)(nil), "RateRequest")
	proto.RegisterType((*RateResponse)(nil), "RateResponse")
	proto.RegisterType((*StreamingRateResponse)(nil), "StreamingRateResponse")
}

func init() { proto.RegisterFile("currency.proto", fileDescriptor_d3dc60ed002193ea) }

var fileDescriptor_d3dc60ed002193ea = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0xd3, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0x07, 0xf0, 0xa6, 0xed, 0xd6, 0xd5, 0x69, 0xcb, 0xc3, 0xb0, 0xad, 0x14, 0x18, 0x55, 0x0f,
	0xa8, 0x9a, 0x50, 0x06, 0x85, 0x13, 0xb7, 0x66, 0xd9, 0x1a, 0x70, 0xc9, 0x2a, 0x87, 0x08, 0x5a,
	0x0e, 0x28, 0x8d, 0xac, 0xaa, 0x12, 0x4b, 0x82, 0xed, 0x1e, 0xb8, 0xf3, 0x91, 0xf8, 0x80, 0xe8,
	0xbd, 0x0e, 0xd4, 0x01, 0x47, 0x6e, 0x3f, 0xd9, 0xef, 0xbd, 0xfc, 0x65, 0x3b, 0xac, 0x93, 0x6d,
	0xb4, 0x56, 0x79, 0xf6, 0xcd, 0x2b, 0x75, 0x61, 0x8b, 0xde, 0xf1, 0xaa, 0x28, 0x56, 0x5f, 0xd4,
	0x99, 0x2e, 0xb3, 0x33, 0x63, 0x53, 0xbb, 0x31, 0xdb, 0x8d, 0xc1, 0x27, 0xe6, 0xca, 0xd4, 0x2a,
	0xa9, 0xbe, 0x6e, 0x94, 0xb1, 0xfc, 0x84, 0xd5, 0xfd, 0xd4, 0xa8, 0xae, 0xd3, 0x77, 0x86, 0x9d,
	0x11, 0xf3, 0xce, 0x6f, 0xc6, 0xbc, 0x90, 0xb4, 0xce, 0x9f, 0x31, 0x37, 0x50, 0xc6, 0xae, 0xf3,
	0xd4, 0xae, 0x8b, 0xbc, 0x5b, 0xfd, 0xab, 0x6c, 0x77, 0x7b, 0x50, 0xb2, 0xd6, 0x76, 0xb8, 0x29,
	0x8b, 0xdc, 0xa8, 0xff, 0x3b, 0x9d, 0x73, 0x56, 0xd7, 0xa9, 0x55, 0xdd, 0x5a, 0xdf, 0x19, 0x3a,
	0x92, 0x3c, 0xf8, 0xee, 0xb0, 0xc3, 0xd8, 0x6a, 0x95, 0x5e, 0xaf, 0xf3, 0xd5, 0xad, 0x6f, 0xbf,
	0x62, 0x6d, 0xac, 0xf8, 0xac, 0x6f, 0x16, 0x28, 0x84, 0x3b, 0x6a, 0x7b, 0xbb, 0x55, 0x61, 0x45,
	0xb6, 0xf4, 0x6e, 0xd7, 0x29, 0xdb, 0x53, 0x5a, 0x17, 0x9a, 0xb2, 0xb8, 0x23, 0xee, 0x6d, 0xcf,
	0xd1, 0xd3, 0x65, 0xe6, 0xc5, 0x74, 0x8e, 0x61, 0x45, 0x6e, 0x4b, 0xfc, 0x26, 0x6b, 0x5c, 0x2b,
	0x63, 0xd2, 0x95, 0x3a, 0xfd, 0x51, 0x65, 0xcd, 0xdf, 0xa9, 0x79, 0x83, 0xd5, 0x2e, 0x12, 0x09,
	0x15, 0x44, 0x12, 0x07, 0xe0, 0x20, 0xde, 0xce, 0xe6, 0x50, 0x45, 0xf8, 0x93, 0x08, 0x6a, 0x88,
	0xf3, 0x85, 0x80, 0x3a, 0x22, 0x10, 0x02, 0xf6, 0x10, 0x13, 0x7f, 0x06, 0xfb, 0x88, 0x30, 0xb9,
	0x84, 0x06, 0x62, 0x36, 0x8d, 0xe0, 0x00, 0x21, 0xaf, 0x22, 0x68, 0x22, 0xe2, 0x0b, 0x01, 0x8c,
	0xda, 0xc3, 0x4b, 0x70, 0x11, 0x6f, 0x62, 0x01, 0x2d, 0x44, 0x74, 0x25, 0xa0, 0x4d, 0xed, 0x52,
	0x40, 0x87, 0xba, 0x12, 0x1f, 0xee, 0x20, 0xde, 0xcb, 0x39, 0x00, 0x62, 0x9c, 0x04, 0x70, 0x97,
	0x62, 0xc8, 0x29, 0x70, 0x9a, 0x33, 0x0e, 0xe0, 0x1e, 0x21, 0x9a, 0xc3, 0x7d, 0x6a, 0x17, 0x01,
	0x1c, 0xd2, 0xe4, 0x40, 0xc2, 0x11, 0x61, 0x1a, 0xc3, 0x31, 0x21, 0x92, 0xd0, 0x45, 0x08, 0xf9,
	0x01, 0x1e, 0x20, 0xde, 0x7d, 0x8c, 0xa0, 0x47, 0x98, 0x4b, 0x78, 0x48, 0x31, 0x16, 0x01, 0x3c,
	0xa2, 0xf0, 0xe1, 0x0c, 0x1e, 0x53, 0xe6, 0x49, 0x00, 0x27, 0x14, 0x23, 0xf4, 0xe1, 0x09, 0x62,
	0x31, 0x96, 0xd0, 0x1f, 0xe5, 0xec, 0xe0, 0xd7, 0xa9, 0xf1, 0xa7, 0xac, 0x31, 0x51, 0x16, 0x2f,
	0x87, 0xb7, 0xbc, 0x9d, 0x27, 0xda, 0xbb, 0x7d, 0x63, 0xfc, 0x35, 0xeb, 0xc4, 0x9b, 0xa5, 0xc9,
	0xf4, 0x7a, 0xa9, 0x70, 0xc3, 0xfc, 0x51, 0x7e, 0xe4, 0xfd, 0xf3, 0x3d, 0x0c, 0x9d, 0xe7, 0xce,
	0x72, 0x9f, 0xfe, 0x81, 0x97, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x93, 0x82, 0x2f, 0x2e,
	0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CurrencyClient is the client API for Currency service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CurrencyClient interface {
	GetRate(ctx context.Context, in *RateRequest, opts ...grpc.CallOption) (*RateResponse, error)
	SubscribeRates(ctx context.Context, opts ...grpc.CallOption) (Currency_SubscribeRatesClient, error)
}

type currencyClient struct {
	cc *grpc.ClientConn
}

func NewCurrencyClient(cc *grpc.ClientConn) CurrencyClient {
	return &currencyClient{cc}
}

func (c *currencyClient) GetRate(ctx context.Context, in *RateRequest, opts ...grpc.CallOption) (*RateResponse, error) {
	out := new(RateResponse)
	err := c.cc.Invoke(ctx, "/Currency/GetRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyClient) SubscribeRates(ctx context.Context, opts ...grpc.CallOption) (Currency_SubscribeRatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Currency_serviceDesc.Streams[0], "/Currency/SubscribeRates", opts...)
	if err != nil {
		return nil, err
	}
	x := &currencySubscribeRatesClient{stream}
	return x, nil
}

type Currency_SubscribeRatesClient interface {
	Send(*RateRequest) error
	Recv() (*StreamingRateResponse, error)
	grpc.ClientStream
}

type currencySubscribeRatesClient struct {
	grpc.ClientStream
}

func (x *currencySubscribeRatesClient) Send(m *RateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *currencySubscribeRatesClient) Recv() (*StreamingRateResponse, error) {
	m := new(StreamingRateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CurrencyServer is the server API for Currency service.
type CurrencyServer interface {
	GetRate(context.Context, *RateRequest) (*RateResponse, error)
	SubscribeRates(Currency_SubscribeRatesServer) error
}

// UnimplementedCurrencyServer can be embedded to have forward compatible implementations.
type UnimplementedCurrencyServer struct {
}

func (*UnimplementedCurrencyServer) GetRate(ctx context.Context, req *RateRequest) (*RateResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetRate not implemented")
}
func (*UnimplementedCurrencyServer) SubscribeRates(srv Currency_SubscribeRatesServer) error {
	return status1.Errorf(codes.Unimplemented, "method SubscribeRates not implemented")
}

func RegisterCurrencyServer(s *grpc.Server, srv CurrencyServer) {
	s.RegisterService(&_Currency_serviceDesc, srv)
}

func _Currency_GetRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServer).GetRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Currency/GetRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServer).GetRate(ctx, req.(*RateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Currency_SubscribeRates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CurrencyServer).SubscribeRates(&currencySubscribeRatesServer{stream})
}

type Currency_SubscribeRatesServer interface {
	Send(*StreamingRateResponse) error
	Recv() (*RateRequest, error)
	grpc.ServerStream
}

type currencySubscribeRatesServer struct {
	grpc.ServerStream
}

func (x *currencySubscribeRatesServer) Send(m *StreamingRateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *currencySubscribeRatesServer) Recv() (*RateRequest, error) {
	m := new(RateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Currency_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Currency",
	HandlerType: (*CurrencyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRate",
			Handler:    _Currency_GetRate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeRates",
			Handler:       _Currency_SubscribeRates_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "currency.proto",
}
