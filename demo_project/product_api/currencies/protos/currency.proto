// header for proto3
syntax = "proto3";

import "google/rpc/status.proto";

// this file declares an rpc stub
// we can define an rpc service interface in a .proto file
// stub is used as a bridge between client and server connection
// hence using the rpc call
// client imports stub and uses it
// stub uses the server code and returns what it wants

/*naive approach is call the xml file from the bank's website again and again
whenever the rates are requested

smart approach is updating the data with some frequency time interval and caching it
to use again and again, here SubscribeRates method comes to play*/
service Currency {
    rpc GetRate(RateRequest) returns (RateResponse); // this function fetches the rate
    rpc SubscribeRates(stream RateRequest) returns (stream StreamingRateResponse); // this function acts as an interval update rates, acts as a bi directional streaming data
    /*all rates are subjected to cost of euros, so 1.2 means the rate of a particualr is 1.2 times that of the euros*/
}

/*message declaration follows this pattern only, like incrementation with each addon or variable*/
message RateRequest{
    Currency1 Base = 1;
    Currency1 Destination = 2;
}

message RateResponse {
    Currency1 Base = 1;
    Currency1 Destination = 2;
    double rate = 3; // double acts as a float 64 response in golang
}

message StreamingRateResponse{

    // oneof means either this or that message, (either)
    oneof message {
        RateResponse rate_response = 1;
        google.rpc.Status error = 2; // for returning an error, we import a few files
    }
}

/*When you're defining a message type, you might want one of its fields to only have one of a pre-defined list of values, here enum comes to play*/
/*here the declaration of variables starts with 0, unlike other declarations*/
enum Currency1{
    EUR=0;
    USD=1;
    JPY=2;
    BGN=3;
    CZK=4;
    DKK=5;
    GBP=6;
    HUF=7;
    PLN=8;
    RON=9;
    SEK=10;
    CHF=11;
    ISK=12;
    NOK=13;
    HRK=14;
    RUB=15;
    TRY=16;
    AUD=17;
    BRL=18;
    CAD=19;
    CNY=20;
    HKD=21;
    IDR=22;
    ILS=23;
    INR=24;
    KRW=25;
    MXN=26;
    MYR=27;
    NZD=28;
    PHP=29;
    SGD=30;
    THB=31;
    ZAR=32;
}